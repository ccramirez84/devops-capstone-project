cat > tekton/pipeline.yaml <<'YAML'
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cd-pipeline
spec:
  params:
    - name: repo-url
      type: string
      description: "La URL del repositorio Git a clonar."
    - name: branch
      type: string
      description: "La rama del repositorio a clonar."
      default: main
    - name: build-image
      type: string
      description: "Nombre completo de la imagen a construir (ej: image-registry.openshift-image-registry.svc:5000/$SN_ICR_NAMESPACE/accounts:1)"
    - name: database-uri
      type: string
      description: "URI de base de datos para las pruebas (nose)."
      default: "sqlite:///test.db"

  workspaces:
    - name: pipeline-workspace
      description: "Espacio de trabajo compartido para el repositorio clonado y manifiestos."

  tasks:
    - name: clone
      taskRef:
        name: git-clone
        kind: ClusterTask
      workspaces:
        - name: output
          workspace: pipeline-workspace
      params:
        - name: url
          value: $(params.repo-url)
        - name: revision
          value: $(params.branch)

    - name: lint
      runAfter:
        - clone
      workspaces:
        - name: source
          workspace: pipeline-workspace
      taskRef:
        name: flake8-run
      params:
        - name: image
          value: "python:3.9-slim"
        - name: args
          value: "--count --max-complexity=10 --max-line-length=127 --statistics"

    - name: tests
      runAfter:
        - clone
      workspaces:
        - name: source
          workspace: pipeline-workspace
      taskRef:
        name: nose
      params:
        - name: database_uri
          value: "$(params.database-uri)"
        - name: args
          value: "-v"

    # Build con Dockerfile en la RAÍZ del repo
    - name: build
      workspaces:
        - name: source
          workspace: pipeline-workspace
      taskRef:
        name: buildah
        kind: ClusterTask
      params:
        - name: IMAGE
          value: "$(params.build-image)"
        - name: DOCKERFILE
          value: Dockerfile
        - name: CONTEXT
          value: .
      runAfter:
        - tests
        - lint

    - name: deploy
      workspaces:
        - name: manifest-dir
          workspace: pipeline-workspace
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            echo "Actualizando manifiesto..."
            sed -i "s|IMAGE_NAME_HERE|$(params.build-image)|g" deploy/deployment.yaml
            echo "Manifiesto resultante:"
            cat deploy/deployment.yaml || true
            echo "Desplegando en OpenShift..."
            oc apply -f deploy/
            echo "Pods de la app con label app=accounts:"
            oc get pods -l app=accounts
      runAfter:
        - build
YAML
