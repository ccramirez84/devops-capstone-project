cat > tekton/tasks.yaml <<'YAML'
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: flake8-run
spec:
  description: "Instala flake8 y ejecuta lint sobre el workspace."
  workspaces:
    - name: source
      description: "Código fuente a analizar"
  params:
    - name: image
      type: string
      description: "Imagen base de Python"
      default: "python:3.9-slim"
    - name: args
      type: string
      description: "Argumentos para flake8"
      default: "--count --max-complexity=10 --max-line-length=127 --statistics"
  steps:
    - name: run-flake8
      image: $(params.image)
      workingDir: $(workspaces.source.path)
      script: |
        #!/usr/bin/env bash
        set -euo pipefail
        python -m pip install --upgrade pip
        pip install --no-cache-dir flake8
        echo "Ejecutando flake8 con args: $(params.args)"
        flake8 $(params.args)

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: nose
spec:
  description: "Esta tarea ejecutará nosetests en la entrada proporcionada."
  workspaces:
    - name: source
      description: "Código fuente con pruebas"
  params:
    - name: args
      description: "Argumentos a pasar a nose"
      type: string
      default: "-v"
    - name: database_uri
      description: "Cadena de conexión de la base de datos"
      type: string
      default: "sqlite:///test.db"
  steps:
    - name: nosetests
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      env:
        - name: DATABASE_URI
          value: $(params.database_uri)
      script: |
        #!/usr/bin/env bash
        set -euo pipefail
        python -m pip install --upgrade pip wheel
        if [[ -f requirements.txt ]]; then
          echo "Instalando dependencias de requirements.txt..."
          pip install -qr requirements.txt || true
        fi
        # Asegura que nose esté presente
        pip install -q nose
        echo "Ejecutando nosetests con args: $(params.args)"
        nosetests $(params.args)

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: echo
spec:
  description: "Imprime un mensaje por pantalla."
  params:
    - name: message
      description: "Mensaje a imprimir"
      type: string
  steps:
    - name: echo-message
      image: alpine:3
      command: ["/bin/echo"]
      args: ["$(params.message)"]

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup
spec:
  description: "Limpia el workspace eliminando todos los archivos."
  workspaces:
    - name: source
      description: "Workspace a limpiar"
  steps:
    - name: remove
      image: alpine:3
      workingDir: $(workspaces.source.path)
      script: |
        #!/usr/bin/env sh
        set -eu
        echo "Removing all files from $(workspaces.source.path) ..."
        if [ -d "$(workspaces.source.path)" ] ; then
          rm -rf "$(workspaces.source.path)"/?* "$(workspaces.source.path)"/.[!.]* "$(workspaces.source.path)"/..?* 2>/dev/null || true
        fi
YAML
